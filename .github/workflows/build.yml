name: Build and Push ZeroClue Docker Images (Optimized)

on:
  # schedule:
  #   - cron: "0 */8 * * *"
  push:
    branches: [main]
    paths:
      - 'Dockerfile'
      - 'Dockerfile.optimized'
      - 'docker-bake.hcl'
      - 'docker-bake-optimized.hcl'
      - 'scripts/**'
      - 'custom_nodes.txt'
      - '.github/workflows/build.yml'
      - '.github/workflows/build-legacy.yml'

jobs:
  dependency-analysis:
    runs-on: ubuntu-latest
    outputs:
      has-conflicts: ${{ steps.analysis.outputs.has-conflicts }}
      conflict-summary: ${{ steps.analysis.outputs.conflict-summary }}
      analysis-artifact: ${{ steps.analysis.outputs.analysis-artifact }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install requests

      - name: Analyze custom nodes requirements
        id: analysis
        run: |
          echo "=== Starting Custom Nodes Dependency Analysis ==="
          echo "Timestamp: $(date)"
          echo "Python version: $(python --version)"

          # Check if custom_nodes.txt exists
          if [ ! -f "custom_nodes.txt" ]; then
            echo "❌ Error: custom_nodes.txt not found"
            echo "has-conflicts=true" >> $GITHUB_OUTPUT
            echo "conflict-analysis=custom_nodes.txt file missing" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "Found $(wc -l < custom_nodes.txt) custom nodes to analyze"

          # Run analysis with error handling
          if python scripts/analyze_requirements.py custom_nodes.txt > analysis.log 2>&1; then
            echo "✅ Analysis completed successfully"
            echo "Analysis results:"
            cat analysis.log | tail -20

            # Run dependency resolver
            echo "=== Running Dependency Resolution ==="
            if python scripts/dependency_resolver.py custom_nodes_analysis.json dependency_resolution.json > resolver.log 2>&1; then
              echo "✅ Dependency resolution completed"
              echo "has-conflicts=false" >> $GITHUB_OUTPUT
              echo "conflict-summary=No critical conflicts found" >> $GITHUB_OUTPUT
              echo "analysis-artifact=dependency_resolution.json" >> $GITHUB_OUTPUT
            else
              echo "❌ Dependency resolution failed"
              cat resolver.log
              echo "has-conflicts=true" >> $GITHUB_OUTPUT
              echo "conflict-summary=Dependency resolution failed" >> $GITHUB_OUTPUT
              echo "analysis-artifact=custom_nodes_analysis.json" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "❌ Analysis failed"
            echo "Analysis errors:"
            cat analysis.log
            echo "has-conflicts=true" >> $GITHUB_OUTPUT
            echo "conflict-summary=Dependency analysis failed" >> $GITHUB_OUTPUT
            echo "analysis-artifact=custom_nodes_analysis.json" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "=== Analysis Summary ==="
          echo "Analysis output files:"
          ls -la *.json *.log || true

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis
          path: |
            custom_nodes_analysis.json
            dependency_resolution.json
            analysis.log
            resolver.log
          retention-days: 30

      - name: Comment on conflicts
        if: steps.analysis.outputs.has-conflicts == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const analysis = JSON.parse(fs.readFileSync('custom_nodes_analysis.json', 'utf8'));

            const comment = `## ⚠️ Dependency Conflicts Detected

            **High-severity conflicts found:** ${analysis.summary.high_severity_conflicts}

            **Most critical conflicts:**
            ${analysis.conflicts.slice(0, 5).map(c =>
              `- **${c.dependency}**: ${c.node1} (${c.version1}) vs ${c.node2} (${c.version2})`
            ).join('\n')}

            **Recommendations:**
            ${analysis.recommendations.map(r => `- ${r}`).join('\n')}

            Please resolve these conflicts before proceeding with the build.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  bake:
    runs-on: ubuntu-latest
    needs: dependency-analysis
    if: needs.dependency-analysis.outputs.has-conflicts != 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          # Optimized variants using Dockerfile.optimized
          - target: base-optimized
            cuda: 12-6
          - target: base-optimized
            cuda: 12-8
          - target: slim-optimized
            cuda: 12-6
          - target: slim-optimized
            cuda: 12-8
          - target: production-optimized
            cuda: 12-6
          - target: production-optimized
            cuda: 12-8
          # Keep some standard variants for compatibility
          - target: base
            cuda: 12-6
          - target: base
            cuda: 12-8
          - target: slim
            cuda: 12-6
          - target: slim
            cuda: 12-8
    steps:
      - name: Check if should run
        run: |
          echo "Building optimized target: ${{ matrix.target }}-${{ matrix.cuda }}"
          echo "Using optimization: true"

      - name: Check disk space before build
        if: env.SKIP_BUILD == ''
        run: |
          echo "=== Disk Space Analysis ==="
          df -h
          echo "Available space: $(df -BG / | tail -1 | awk '{print $4}')GB"

          # Check minimum space requirement (20GB)
          AVAILABLE_SPACE=$(df -BG / | tail -1 | awk '{print $4}' | sed 's/G//')
          if [ "$AVAILABLE_SPACE" -lt 20 ]; then
            echo "⚠️ Warning: Low disk space (${AVAILABLE_SPACE}GB available)"
            echo "Build may fail due to insufficient disk space"
          else
            echo "✅ Sufficient disk space available (${AVAILABLE_SPACE}GB)"
          fi

      - name: Maximize build space
        if: env.SKIP_BUILD == ''
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-cached-tools: 'true'
          remove-swapfile: 'true'

      - name: Additional cleanup and monitoring
        if: env.SKIP_BUILD == ''
        run: |
          echo "=== Enhanced Cleanup and Space Monitoring ==="

          # Check space before additional cleanup
          BEFORE_SPACE=$(df -BG / | tail -1 | awk '{print $4}' | sed 's/G//')
          echo "Available space before cleanup: ${BEFORE_SPACE}GB"

          # Clean npm cache if exists
          if command -v npm &> /dev/null; then
            npm cache clean --force
          fi

          # Clean Python cache
          find /tmp -name "*.pyc" -delete 2>/dev/null || true
          find /tmp -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

          # Clean pip cache if available
          if command -v pip &> /dev/null; then
            pip cache purge || true
          fi

          # Clean Docker build cache (safe operations)
          docker system prune -f --volumes || true
          docker builder prune -f || true

          # Clean temporary files and caches
          rm -rf ~/.cache/* 2>/dev/null || true
          rm -rf /tmp/pip-* 2>/dev/null || true
          rm -rf /tmp/*~ 2>/dev/null || true
          rm -rf /tmp/.ssh/* 2>/dev/null || true

          # Clean GitHub Actions specific caches
          rm -rf /home/runner/.cache/* 2>/dev/null || true
          rm -rf /home/runner/work/_temp/* 2>/dev/null || true

          # Clean system logs and temp files (user accessible)
          find /var/log -name "*.log" -type f -truncate -s 0 2>/dev/null || true
          find /tmp -type f -atime +1 -delete 2>/dev/null || true

          # Clean package manager caches
          if command -v apt-get &> /dev/null; then
            apt-get autoremove -y 2>/dev/null || true
          fi

          # Check space after cleanup
          echo "=== Disk Space After Enhanced Cleanup ==="
          df -h
          AVAILABLE_SPACE=$(df -BG / | tail -1 | awk '{print $4}' | sed 's/G//')
          echo "Available space after cleanup: ${AVAILABLE_SPACE}GB"

          # Calculate space recovered
          SPACE_RECOVERED=$((AVAILABLE_SPACE - BEFORE_SPACE))
          echo "Space recovered: ${SPACE_RECOVERED}GB"

          # Fail if critically low space (<10GB)
          if [ "$AVAILABLE_SPACE" -lt 10 ]; then
            echo "❌ CRITICAL: Insufficient disk space (${AVAILABLE_SPACE}GB)"
            echo "Build will likely fail due to disk space constraints"
            exit 1
          elif [ "$AVAILABLE_SPACE" -lt 15 ]; then
            echo "⚠️ WARNING: Low disk space (${AVAILABLE_SPACE}GB)"
            echo "Consider monitoring build closely"
          else
            echo "✅ Sufficient disk space available (${AVAILABLE_SPACE}GB)"
          fi

      - name: Download analysis artifacts
        uses: actions/download-artifact@v4
        with:
          name: dependency-analysis

      - name: Set build optimization args
        if: env.SKIP_BUILD == ''
        run: |
          if [ -f "dependency_resolution.json" ]; then
            echo "BUILD_OPTIMIZED=true" >> $GITHUB_ENV
            echo "Using optimized dependency resolution"
          else
            echo "BUILD_OPTIMIZED=false" >> $GITHUB_ENV
            echo "Using standard dependency installation"
          fi

      - name: Docker login
        if: env.SKIP_BUILD == ''
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        if: env.SKIP_BUILD == ''
        uses: docker/setup-buildx-action@v3

      - name: Get current date
        if: env.SKIP_BUILD == ''
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Build and push
        if: env.SKIP_BUILD == ''
        uses: docker/bake-action@v6
        with:
          targets: ${{ matrix.target }}-${{ matrix.cuda }}
          push: true
          load: false
          files: |
            docker-bake.hcl
            ${{ contains(matrix.target, 'optimized') && 'docker-bake-optimized.hcl' || '' }}

      - name: Build summary
        if: env.SKIP_BUILD == ''
        run: |
          echo "## Optimized Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: ${{ matrix.target }}" >> $GITHUB_STEP_SUMMARY
          echo "- **CUDA Version**: ${{ matrix.cuda }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: zeroclue/comfyui" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date**: ${{ steps.date.outputs.date }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Mode**: Optimized with dependency analysis" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.dependency-analysis.outputs.conflict-summary }}" ]; then
            echo "- **Dependency Analysis**: ${{ needs.dependency-analysis.outputs.conflict-summary }}" >> $GITHUB_STEP_SUMMARY
          fi